{"ast":null,"code":"import _objectSpread from \"/Users/elizabethprendergast/Development/code/lutrivia-react-london-web-082619/lutrivia/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/elizabethprendergast/Development/code/lutrivia-react-london-web-082619/lutrivia/src/components/Game.js\";\nimport React from 'react';\nimport QuestionsContainer from '../containers/QuestionsContainer';\nimport ScoreForm from './ScoreForm';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.scoreQuestion = (question, guess) => {\n      let updatedQuestion = _objectSpread({}, question, {\n        guess: guess\n      });\n\n      console.log(updatedQuestion);\n      let updatedQuestions = this.state.questions.map(q => {\n        if (q.text === question.text) {\n          q.guess = guess;\n        }\n      });\n      this.setState(_objectSpread({}, this.state, {\n        questions: updatedQuestions\n      }));\n      console.log(this.state);\n    };\n\n    this.state = {\n      questions: props.questions.map(question => {\n        return _objectSpread({}, question, {\n          guess: \"\"\n        });\n      }),\n      questionsRemaining: props.questions.length,\n      score: 0\n    };\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(QuestionsContainer, {\n      questions: this.state.questions,\n      scoreQuestion: this.scoreQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), this.state.questionsRemaining === 0 ? React.createElement(ScoreForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/elizabethprendergast/Development/code/lutrivia-react-london-web-082619/lutrivia/src/components/Game.js"],"names":["React","QuestionsContainer","ScoreForm","Game","Component","constructor","props","scoreQuestion","question","guess","updatedQuestion","console","log","updatedQuestions","state","questions","map","q","text","setState","questionsRemaining","length","score","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAmC;AAE/BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SASlBC,aATkB,GASF,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAEjC,UAAIC,eAAe,qBAAOF,QAAP;AAAiBC,QAAAA,KAAK,EAAEA;AAAxB,QAAnB;;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AAEA,UAAIG,gBAAgB,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,GAArB,CAAyBC,CAAC,IAAI;AACjD,YAAIA,CAAC,CAACC,IAAF,KAAWV,QAAQ,CAACU,IAAxB,EAA6B;AACzBD,UAAAA,CAAC,CAACR,KAAF,GAAUA,KAAV;AACH;AACJ,OAJsB,CAAvB;AAOA,WAAKU,QAAL,mBACO,KAAKL,KADZ;AAEIC,QAAAA,SAAS,EAAEF;AAFf;AAIAF,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,KAAjB;AAGH,KA5BiB;;AAEd,SAAKA,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAET,KAAK,CAACS,SAAN,CAAgBC,GAAhB,CAAoBR,QAAQ,IAAI;AAAC,iCAAWA,QAAX;AAAqBC,UAAAA,KAAK,EAAE;AAA5B;AAAgC,OAAjE,CADF;AAETW,MAAAA,kBAAkB,EAAEd,KAAK,CAACS,SAAN,CAAgBM,MAF3B;AAGTC,MAAAA,KAAK,EAAE;AAHE,KAAb;AAKH;;AAuBDC,EAAAA,MAAM,GAAE;AACJZ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,KAAjB;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAE,kBAAF;AAAqB,MAAA,SAAS,EAAE,KAAKA,KAAL,CAAWC,SAA3C;AAAsD,MAAA,aAAa,EAAE,KAAKR,aAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEM,KAAKO,KAAL,CAAWM,kBAAX,KAAkC,CAAlC,GAAsC,oBAAE,SAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtC,GAAuD,IAF7D,CADJ;AAMH;;AAxC8B;;AA4CnC,eAAejB,IAAf","sourcesContent":["import React from 'react';\nimport QuestionsContainer from '../containers/QuestionsContainer';\nimport ScoreForm from './ScoreForm'\n\nclass Game extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            questions: props.questions.map(question => {return {...question, guess: \"\"}}),\n            questionsRemaining: props.questions.length,\n            score: 0\n        }\n    }\n\n    scoreQuestion = (question, guess) => {\n\n        let updatedQuestion = {...question, guess: guess}\n        console.log(updatedQuestion)\n\n        let updatedQuestions = this.state.questions.map(q => {\n            if (q.text === question.text){\n                q.guess = guess\n            }\n        })\n\n\n        this.setState({\n            ...this.state,\n            questions: updatedQuestions\n        })\n        console.log(this.state)\n\n\n    }\n\n    render(){\n        console.log(this.state)\n        return(\n            <div>\n                < QuestionsContainer questions={this.state.questions} scoreQuestion={this.scoreQuestion}/>\n                { this.state.questionsRemaining === 0 ? < ScoreForm /> : null}\n            </div>\n        )\n    }\n\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}